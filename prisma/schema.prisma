// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Course{
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String @db.Text
  description String? 
  price Float?
  userId String
  isPublished Boolean @default(false)
  categoryId String?
  category Category? @relation(fields: [categoryId],references: [id])
  attachments Attachment[]
  imgUrl String?

@@index([categoryId])

}

model Category{
  id String @id @default(uuid())
  name String @unique
  courses Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




model  Attachment{
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  url String
  courseId String
  course Course @relation(fields: [courseId],references: [id],onDelete:Cascade)
  @@index([courseId])
}

model Chapter{
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String
  description String? 
  videoUrl String?
  isFree Boolean @default(false)
  position Int
  isPublished Boolean @default(false)
  maxData MuxData?
  courseId String
  course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)
  userProgress UserProgress[]
  @@index([courseId])
}

model StripeCustomer{
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @unique
  stripeCustomerId String @unique
}

model Purchase{
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  courseId String
  course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)
  @@index([courseId])
  
  @@unique([userId,courseId])
}



model UserProgress{
    id String @id @default(uuid())
    userId String
    chapterId String
    isCompleted Boolean @default(false)
    chapter Chapter @relation(fields: [chapterId],references: [id],onDelete:Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([chapterId])
    @@index([chapterId,userId])
    @@unique([userId,chapterId])

}
